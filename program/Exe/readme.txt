Наверное, Вас разочарует графическое представление "склонностей", на которое меня хватило, но увы - разработка интерфейсов меня не так вдохновляет, как разработка ядра логики. Окна в приложении весьма своеобразно себя перерисовывают, поэтому если будут графические артефакты - сворачиваете форму и разворачиваете её обратно :).
После запуска открывается интерфейс запуска нижнего уровня логики (просмотр жизни одной особи), форма для верхнего уровня - в меню "Основные формы -> Верхний уровень логики".
Я описывал Вам в более ранних письмах смысл идентификаторов, поэтому, наверное, подробно их объяснять не надо.

Программа сгенерирует для нижнего уровня логики два .html-файла с префиксами actionlist и simulateLife, названные согласно значениям склонностей и продолжительности жизни. actionlist кратко перечисляет идентификаторы совершённых особью действий, simulateLife подробно расписывает изменения, происходившие с особью.

Действия с префиксом job  изображают  различные  виды "работы" особи, с префиксом study - "учёбы", действие actLeizure изображает действие "отдыха". Если особь работает, она повышает характеристики, увеличивает количество своих денег (параметр moneyQt, от Money Quantity), и сильно увеличивает значение "стресса" (параметр stressLv, от Stress Level). Если особь учится, она сильно повышает характеристики, сильно уменьшает количество своих денег и увеличивает значение "стресса". Если особь отдыхает, она, в зависимости от количества своих денег, слабо или сильно уменьшает значение "стресса" и денег.

Основная парадигма, стоящая за данной реализацией - для серьёзной перенастройки постановки задачи предполагается работать непосредственно с исходным кодом программы. Этому сильно мешает то, что компилятор Visual Prolog 7.1 - проприетарный. Уж извините, но я отказался от идеи писать парсер для подключения условий конкретной задачи из внешних источников.